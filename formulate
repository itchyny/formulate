#!/bin/bash
set -euo pipefail
shopt -s extglob

readonly CMDNAME="${BASH_SOURCE[0]##*/}"
readonly VERSION=0.0.8

abort() {
  echo "$1" >&2
  exit 1
}

usage() {
  echo "Usage: $CMDNAME create user/name or $CMDNAME update name.rb"
}

github-api() {
  local url params token
  url="https://api.github.com$1"
  echo "Fetching: $url" >&2
  params=()
  if token="$(git config --global github.token)"; then
    params+=(-H "Authorization: token $token")
  fi
  curl -sSf ${params[@]:+"${params[@]}"} "$url" 2> >(sed 's/^/Got error: /' >&2)
}

get-latest-release() {
  github-api "/repos/$1/releases/latest" || github-api "/repos/$1/tags" | jq -e 'try .[0]' ||
    abort "Failed to get the latest release: $1"
}

get-latest-version() {
  jq -e -r 'try (.tag_name // .name | sub("^v"; ""))' ||
    abort "Failed to get the latest version"
}

get-download-url() {
  jq -e -r 'try (first(.assets[].browser_download_url | select(test("darwin")))? // .zipball_url)' ||
    abort "Failed to get the download URL"
}

get-sha256-checksum() {
  echo "Fetching: $1" >&2
  curl -sSfL "$1" | sha256sum | cut -d ' ' -f1 | tee >(sed 's/^/Got SHA-256 checksum: /' >&2) ||
    abort "Failed to get the SHA-256 checksum: $1"
}

create() {
  local repository bin_name formula release version url
  repository="$1"
  bin_name="${repository##*/}"
  formula="$bin_name.rb"
  echo "Creating: $formula" >&2
  release="$(get-latest-release "$repository")"
  version="$(get-latest-version <<<"$release")"
  echo "Found version: $version" >&2
  url="$(get-download-url <<<"$release")"
  cat >"$formula" <<EOF
class $(perl -pe 's/(^|-)(\w)/\U$2/g' <<<"$bin_name") < Formula
  homepage 'https://github.com/$repository'
  version '$version'
  url '$url'
  sha256 '$(get-sha256-checksum "$url")'
  head 'https://github.com/$repository.git'

  def install
    bin.install '$bin_name'
  end

  test do
    system "#{bin}/$bin_name", '--version'
  end
end
EOF
  echo "Created: $formula" >&2
}

update() {
  local formula repository current_version release version line url
  formula="$1"
  echo "Updating: $formula" >&2
  if ! repository="$(sed -n -E '/^ *homepage /s/.*github\.com\/(.*)'\''.*/\1/p' "$formula" | head -n1 | grep ^)"; then
    abort "Failed to find the repository: $formula"
  fi
  if ! current_version="$(sed -n -E '/^ *version /s/.*'\''(.*)'\''.*/\1/p' "$formula" | head -n1 | grep ^)"; then
    abort "Failed to find the current version: $formula"
  fi
  release="$(get-latest-release "$repository")"
  version="$(get-latest-version <<<"$release")"
  if [[ "$current_version" == "$version" ]]; then
    echo "Already the latest version: $version" >&2
    return
  fi
  echo "Found version: $version" >&2
  temp_file="$(mktemp)" # global variable for trap
  trap 'rm -rf "$temp_file"' EXIT
  while IFS= read -r line; do
    case "$line" in
    *( )version\ *)
      line="$(sed -E 's/[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}/'"$version"'/' <<<"$line")"
      ;;
    *( )url\ *)
      line="$(sed -E 's/[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}/'"$version"'/g' <<<"$line")"
      url="$(cut -d "'" -f2 <<<"$line")"
      ;;
    *( )sha256\ *)
      [[ -z "$url" ]] && abort "URL not found: $line"
      line="$(sed -E "s/'.*'/'$(get-sha256-checksum "$url")'/" <<<"$line")"
      ;;
    esac
    echo "$line"
  done <"$formula" >"$temp_file"
  mv "$temp_file" "$formula"
  echo "Updated: $formula" >&2
}

if [[ $# -lt 1 ]]; then
  usage && abort "$CMDNAME: specify command"
elif [[ $# -gt 2 ]]; then
  usage && abort "$CMDNAME: too many arguments"
else
  case "$1" in
  create | update)
    if [[ $# -ne 2 ]]; then
      usage && abort "$CMDNAME: specify repository or formula file"
    fi
    "$@"
    ;;
  --version | -v)
    echo "$CMDNAME $VERSION"
    ;;
  --help | -h)
    usage
    ;;
  *)
    usage && abort "$CMDNAME: unknown command: $1"
    ;;
  esac
fi

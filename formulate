#!/bin/bash
# shellcheck disable=SC2001
set -euo pipefail

cmdname="$(basename "${BASH_SOURCE[0]}")"

report-error() {
  echo "$cmdname: $1" > /dev/stderr
  exit 1
}

if [[ $# -lt 1 ]]; then
  report-error "unknown command"
elif [[ $# -lt 2 ]]; then
  report-error "unknown target"
elif [[ $# -gt 2 ]]; then
  report-error "too many arguments"
fi

get-latest-json() {
  target=$1
  api_url="https://api.github.com/repos/$target/releases/latest"
  echo "Fetching $api_url" > /dev/stderr
  curl -s "$api_url"
}

find-latest-version() {
  json=$1
  version=$(echo "$json" | jq -r .tag_name)
  if [[ $version == "null" ]]; then
    report-error "failed to get version: $json"
  fi
  echo "${version##v}"
}

find-download-url() {
  json=$1
  url=$(echo "$json" | sed -n '/browser_download_url.*darwin/s/^.*: *"\(.*\)".*$/\1/gp' | head -n1)
  if [[ $url == "" ]]; then
    report-error "failed to get download url: $json"
  fi
  echo "$url"
}

get-target-name() {
  target=$1
  echo "${target##*/}"
}

get-sha256() {
  url=$1
  echo "Fetching $url" > /dev/stderr
  shasum=$(curl -s -L "$url" | sha256sum | cut -f1 -d ' ')
  echo "Got sha256sum: $shasum" > /dev/stderr
  echo "$shasum"
}

init() {
  target=$1
  name=$(get-target-name "$target")
  formula_name=$(echo "$name" | perl -ne 'print ucfirst')
  output="$name.rb"
  echo "Creating $output" > /dev/stderr
  json=$(get-latest-json "$target")
  version=$(find-latest-version "$json")
  echo "Found version $version" > /dev/stderr
  url=$(find-download-url "$json")
  sha256=$(get-sha256 "$url")
  homepage="https://github.com/$target"
  echo "class $formula_name < Formula
  homepage '$homepage'
  version '$version'
  url '$url'
  sha256 '$sha256'

  def install
    bin.install '$name'
  end

  test do
    system \"#{bin}/$name\", '--version'
  end
end" > "$output"
  echo "Created $output" > /dev/stderr
}

get-target-from-formula() {
  target_file=$1
  sed -n "/homepage.*github.com/s|^.*github.com/\\(.*\\)'|\\1|gp" < "$target_file" | head -n1
}

update() {
  output=$1
  echo "Updating $output" > /dev/stderr
  target=$(get-target-from-formula "$output")
  if [[ $target == "" ]]; then
    report-error "failed to find target: $output"
  fi
  name=$(get-target-name "$target")
  json=$(get-latest-json "$target")
  version=$(find-latest-version "$json")
  echo "Found version $version" > /dev/stderr
  url=""
  outtmp=$(mktemp -t "$name")
  trap 'rm -rf $outtmp' EXIT SIGHUP SIGINT SIGQUIT SIGTERM
  while IFS= read -r line; do
    if echo "$line" | grep '^ *version ' > /dev/null; then
      line=$(echo "$line" | sed 's/[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}/'"$version"'/')
    elif echo "$line" | grep '^ *url ' > /dev/null; then
      line=$(echo "$line" | sed 's/[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}/'"$version"'/')
      url=$(echo "$line" | sed "s/^.*'\\(.*\\)'.*$/\\1/")
    elif echo "$line" | grep '^ *sha256 ' > /dev/null; then
      if [[ $url == "" ]]; then
        report-error "url not found: $line"
      fi
      sha256=$(get-sha256 "$url")
      line=$(echo "$line" | sed "s/'.*'/'$sha256'/")
    fi
    echo "$line"
  done < "$output" > "$outtmp"
  mv "$outtmp" "$output"
  echo "Updated $output" > /dev/stderr
}

main() {
  subcmd=$1
  case "$subcmd" in
    init)
      init "$2"
      ;;
    update)
      update "$2"
      ;;
    *)
      report-error "unknown command: $subcmd"
      ;;
  esac
}

main "$1" "$2"
